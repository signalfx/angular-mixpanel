{"version":3,"file":"angular-mixpanel.min.js","sources":["/Users/ozan/code/boilerplate-gulp-angular/node_modules/browserify/node_modules/browser-pack/_prelude.js","/Users/ozan/code/angular-mixpanel/src/module.js"],"names":[],"mappings":"CAAA,SAAA,GAAA,GAAA,gBAAA,UAAA,mBAAA,QAAA,OAAA,QAAA,QAAA,IAAA,kBAAA,SAAA,OAAA,IAAA,UAAA,OAAA,CAAA,GAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,MAAA,EAAA,gBAAA,MAAA,WAAA,MAAA,SAAA,GAAA,EAAA,EAAA,GAAA,QAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,GAAA,kBAAA,UAAA,OAAA,KAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,IAAA,OAAA,uBAAA,EAAA,KAAA,GAAA,GAAA,EAAA,IAAA,WAAA,GAAA,GAAA,GAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,MAAA,GAAA,GAAA,QAAA,IAAA,GAAA,GAAA,kBAAA,UAAA,QAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,GAAA,WCAA,YAGA,SAAA,OAAA,yBACA,UAAA,sBAAA,WAAA,SAAA,GACA,OACA,SAAA,IACA,OACA,mBAAA,KAEA,KAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,QAAA,WACA,GAAA,GAAA,EAAA,oBACA,EAAA,OACA,EAAA,OACA,EAAA,EAAA,kBAEA,GAAA,MAAA,EAAA,UAKA,SAAA,WAAA,WACA,GAAA,EAGA,MAAA,SAAA,SAAA,GACA,EAAA,GAGA,KAAA,MAAA,OACA,KAAA,UACA,KAAA,YAAA,UAEA,KAAA,MAAA,UAAA,SAAA,GACA,GAAA,EAAA,MAAA,EAKA,KAAA,EAAA,SACA,KAAA,IAAA,OAAA,4DAKA,OAAA,MAAA,OAIA,EAAA,SAAA,KAAA,KAAA,MAAA,KAAA,OAAA,KAAA,aAEA,EAAA,SAAA,KAAA,cANA,EAAA","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n/* global angular */\n\nangular.module('analytics.mixpanel', [])\n  .directive('mixpanelTrackClick', function(mixpanel) {\n    return {\n      restrict: 'A',\n      scope: {\n        'mixpanelProperties': '='\n      },\n      link: function(scope, element, attr) {\n        element.on('click', function() {\n          var eventName = attr.mixpanelTrackClick ||\n            element.val() ||\n            element.text(),\n            properties = scope.mixpanelProperties;\n\n          mixpanel.track(eventName, properties);\n        });\n      }\n    };\n  })\n  .provider('mixpanel', function() {\n    var mixpanelInstance;\n\n    // Allow the explicit passing in of a mixpanel object\n    this.mixpanel = function(value) {\n      mixpanelInstance = value;\n    };\n\n    this.token = undefined;\n    this.config = {};\n    this.libraryName = 'angular';\n\n    this.$get = function($window) {\n      if (mixpanelInstance) return mixpanelInstance;\n\n      // If no mixpanel instance was passed into this provider, then\n      // we'll create a new instance from the global mixpanel object.\n      // This ensures we don't overwrite existing mixpanel deployments.\n      if (!$window.mixpanel) {\n        throw new Error('Unable to find mixpanel, is the tag ' +\n          'included in the page?');\n      }\n\n      // If no token is passed, use the existing global mixpanel instance\n      if (!this.token) return $window.mixpanel;\n\n      // If a token is passed, then create a new mixpanel insteance\n      // and pass the handler for it.\n      $window.mixpanel.init(this.token, this.config, this.libraryName);\n\n      return $window.mixpanel[this.libraryName];\n    };\n  });"],"sourceRoot":"/source/"}