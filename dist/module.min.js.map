{"version":3,"sources":["/Users/ozan/code/angular-mixpanel/node_modules/boilerplate-gulp-angular/node_modules/browserify/node_modules/browser-pack/_prelude.js","/Users/ozan/code/angular-mixpanel/src/createMixpanelDelegator.js","/Users/ozan/code/angular-mixpanel/src/module.js"],"names":[],"mappings":"CAAA,SAAA,GAAA,GAAA,gBAAA,UAAA,mBAAA,QAAA,OAAA,QAAA,QAAA,IAAA,kBAAA,SAAA,OAAA,IAAA,UAAA,OAAA,CAAA,GAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,MAAA,EAAA,OAAA,MAAA,WAAA,MAAA,SAAA,GAAA,EAAA,EAAA,GAAA,QAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,GAAA,kBAAA,UAAA,OAAA,KAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,IAAA,OAAA,uBAAA,EAAA,KAAA,GAAA,GAAA,EAAA,IAAA,WAAA,GAAA,GAAA,GAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,MAAA,GAAA,GAAA,QAAA,IAAA,GAAA,GAAA,kBAAA,UAAA,QAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,GAAA,SAAA,EAAA,GCAA,YASA,GAAA,QAAA,SAAA,EAAA,EAAA,GACA,QAAA,KACA,MAAA,GACA,EAAA,SAAA,GADA,EAAA,SAIA,QAAA,MAEA,GAAA,IACA,OACA,OACA,UACA,QACA,cACA,cACA,WACA,gBACA,aACA,WACA,kBACA,QACA,aACA,aACA,gBAGA,GACA,MACA,WACA,YACA,SACA,eACA,gBACA,eAGA,IAqBA,OAnBA,GAAA,QAAA,SAAA,GACA,EAAA,GAAA,WACA,GAAA,EAAA,MAAA,EAEA,IAAA,GAAA,GACA,OAAA,GAAA,GAAA,MAAA,EAAA,cAIA,EAAA,UACA,EAAA,QAAA,SAAA,GACA,EAAA,OAAA,GAAA,WACA,GAAA,EAAA,MAAA,EAEA,IAAA,GAAA,GACA,OAAA,GAAA,OAAA,GAAA,MAAA,EAAA,OAAA,cAIA,uBClEA,YAGA,IAAA,GAAA,EAAA,4BAEA,SAAA,OAAA,yBACA,UAAA,sBAAA,WAAA,SAAA,GACA,OACA,SAAA,IACA,OACA,mBAAA,KAEA,KAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,QAAA,WACA,GAAA,GAAA,EAAA,oBACA,EAAA,OACA,EAAA,OACA,EAAA,EAAA,kBAEA,GAAA,MAAA,EAAA,UAKA,SAAA,WAAA,WACA,GAAA,GAAA,EAAA,CAGA,MAAA,SAAA,SAAA,GACA,EAAA,GAGA,KAAA,MAAA,OACA,KAAA,UACA,KAAA,YAAA,UAKA,KAAA,QAAA,SAAA,GACA,QAAA,QAAA,IACA,IAAA,MACA,EAAA,EAAA,OAAA,IAEA,GAAA,GAIA,KAAA,MAAA,UAAA,OAAA,SAAA,EAAA,GAqCA,MAjCA,KACA,EAAA,SAaA,KAAA,OAGA,EAAA,SAAA,KAAA,KAAA,MAAA,KAAA,OAAA,KAAA,aAEA,EAAA,EAAA,EAAA,KAAA,cAEA,EAAA,EAAA,IAnBA,EAAA,KAAA,4DAKA,EAAA,GACA,UACA,YAEA,QAAA,KAeA,EAEA,EAAA,EAAA,EAAA,QAAA,GACA,GACA,EAAA,QAAA,GAGA","file":"module.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/* Mixpanel dynamically rewrites it's object bound to the window upon loading\n  from the CDN origin. This means that if a reference to the mixpanel object\n  is acquired prior to the mixpanel script loading, it becomes stale. This\n  factory creates an api which dispatches the call to the current mixpanel\n  object bound to the window at call-time, ensuring the calls go to the right\n  place.\n*/\nmodule.exports = function ($window, instanceName, disabled) {\n  function getMixpanelInstance() {\n    if(!instanceName) return $window.mixpanel;\n    return $window.mixpanel[instanceName];\n  }\n\n  function noop(){}\n\n  var methods = [\n    'init',\n    'push',\n    'disable',\n    'track',\n    'track_links',\n    'track_forms',\n    'register',\n    'register_once',\n    'unregister',\n    'identify',\n    'get_distinct_id',\n    'alias',\n    'set_config',\n    'get_config',\n    'get_property'\n  ];\n\n  var peopleMethods = [\n    'set',\n    'set_once',\n    'increment',\n    'append',\n    'track_charge',\n    'clear_charges',\n    'delete_user'\n  ];\n\n  var api = {};\n\n  methods.forEach(function(methodName){\n    api[methodName] = function() {\n      if(disabled) return noop;\n\n      var mixpanel = getMixpanelInstance();\n      return mixpanel[methodName].apply(mixpanel, arguments);\n    };\n  });\n\n  api.people = {};\n  peopleMethods.forEach(function(methodName){\n    api.people[methodName] = function(){\n      if(disabled) return noop;\n\n      var mixpanel = getMixpanelInstance();\n      return mixpanel.people[methodName].apply(mixpanel.people, arguments);\n    };\n  });\n\n  return api;\n};\n","'use strict';\n/* global angular */\n\nvar createMixpanelDelegator = require('./createMixpanelDelegator');\n\nangular.module('analytics.mixpanel', [])\n  .directive('mixpanelTrackClick', ['mixpanel', function(mixpanel) {\n    return {\n      restrict: 'A',\n      scope: {\n        'mixpanelProperties': '='\n      },\n      link: function(scope, element, attr) {\n        element.on('click', function() {\n          var eventName = attr.mixpanelTrackClick ||\n            element.val() ||\n            element.text(),\n            properties = scope.mixpanelProperties;\n\n          mixpanel.track(eventName, properties);\n        });\n      }\n    };\n  }])\n  .provider('mixpanel', function() {\n    var mixpanelInstance, disabledEvents, disabled;\n\n    // Allow the explicit passing in of a mixpanel object\n    this.mixpanel = function(value) {\n      mixpanelInstance = value;\n    };\n\n    this.token = undefined;\n    this.config = {};\n    this.libraryName = 'angular';\n\n    // Enables multiple calls to disable events which will be collected then\n    // applied during initialization. If disable is called, then it overrides\n    // all individual event disabling.\n    this.disable = function(events) {\n      if(angular.isArray(events)){\n        if(!disabledEvents) disabledEvents = [];\n        disabledEvents = disabledEvents.concat(events);\n      } else {\n        disabled = true;\n      }\n    };\n\n    this.$get = function($window, $log) {\n      // If no mixpanel instance was passed into this provider, then\n      // we'll create a new instance from the global mixpanel object.\n      // This ensures we don't overwrite existing mixpanel deployments.\n      if (!mixpanelInstance) {\n        if (!$window.mixpanel) {\n          $log.warn('Unable to find mixpanel, is the tag included in the' +\n            'page?');\n\n          // When no mixpanel instance is found on the window, create\n          // a mock mixpanel object so that calls to the api don't error.\n          mixpanelInstance = createMixpanelDelegator({\n            mixpanel: {\n              people: {}\n            }\n          }, undefined, true);\n        } else {\n          // If no token is passed, use the existing global mixpanel instance\n          if (this.token) {\n            // If a token is passed, then create a new mixpanel insteance\n            // and pass the handler for it.\n            $window.mixpanel.init(this.token, this.config, this.libraryName);\n\n            mixpanelInstance = createMixpanelDelegator($window, this.libraryName);\n          } else {\n            mixpanelInstance = createMixpanelDelegator($window);\n          }\n        }\n      }\n\n      if(disabled){\n        // Create a mock (noop) instance of the mixpanel API\n        mixpanelInstance = createMixpanelDelegator($window, undefined, true);\n      } else if (disabledEvents){\n        mixpanelInstance.disable(disabledEvents);\n      }\n\n      return mixpanelInstance;\n    };\n  });\n"],"sourceRoot":"/source/"}